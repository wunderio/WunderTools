---

- hosts: default
  become: true
  become_method: sudo
  user: vagrant
  roles:
   - { role: base, tags: [ 'base' ] }
   - { role: nginx, tags: [ 'nginx' ] }
   - { role: php-fpm, tags: [ 'php-fpm' ] }
   # Instead of php-fpm + nginx you can also use apache + php
   # - { role: httpd-php, tags: [ 'httpd-php' ] }
   - { role: varnish, tags: [ 'varnish' ] }
   - { role: memcached, tags: [ 'memcached' ] }
   # Drush also includes composer and prestissimo for speedier composer runs
   - { role: drush, tags: [ 'drush' ] }
   # Drupal console is also available:
   # - { role: drupal-console, tags: [ 'drupal-console' ] }
   - { role: dbserver, tags: [ 'dbserver' ] }
   # By default this will create database called drupal with user: drupal and password: password
   - { role: drupal-db, tags: [ 'drupal-db' ] }
   # Local replacement for letsencrypt. Uses letsencrypt settings but creates self signed certificates for local use.
   - { role: selfencrypt, tags: [ 'selfencrypt' ] }
   - { role: sslterminator, tags: [ 'sslterminator' ] }
   # For search. If you need project specific custom settings you need to copy this role from
   # ansible/playbook/roles/solr to local_ansible_roles/{project]_solr and do the modifications there (under files/)
   # - { role: solr, tags: [ 'solr' ] }
   # Of course Elasticsearch as search backend is more modern
   # - { role: elasticsearch, tags: [ 'elasticsearch' ] }
   # Devtools, uncomment to enable xdebug and blackfire
   # To use blackfire you need to define blackfire keys and tokens (see ansible/playbook/roles/devtools/defaults/main.yml for reference)
   # You can get those keys and tokens from https://blackfire.io/docs/up-and-running/installation
   # Otherwise you can disable blackfire by setting enable_blackfire: false
   - { role: devtools, tags: [ 'devtools' ] }
   # Mailhog, uncomment to catch outgoing mail. You can access mailhog at your local site url on port 8025
   - { role: mailhog, tags: [ 'mailhog' ] }
   # Optional HHVM role.
   # Requires WunderMachina hhvm branch https://github.com/wunderkraut/WunderMachina/tree/hhvm
   # More in-depth instructions at https://github.com/wunderkraut/WunderTools/wiki/HHVM
   #- { role: hhvm, tags: [ 'hhvm' ] }
   #- { role: selenium, tags: [ 'selenium' ] }

  tasks:

    - cron: name="check dirs" minute="0" hour="5,2" job="ls -alh > /dev/null"

  vars:
    domain_name: local.example.com
    wkv_site_env: local

    partition_var_log: False
    partition_var_lib_mysql: False

    nginx_disable_content_security_policy: True

    # How to assign memory for each role and set the correct
    # amount of worker processes / threads
    memory_db: 1024 # In MB
    memory_app: 1024 # In MB
    # NOTE: ALWAYS leave some spare memory for the server

    # Make sure changes to PHP files are not ignored
    php_ini:
      - section: OPCACHE
        options:
          - key: opcache.validate_timestamps
            val: 1
          - key: opcache.revalidate_freq
            val: 0

    # letsencrypt variables are also used by selfencrypt
    letsencrypt_email: support@example.com
    letsencrypt_domains:
      - "{{ domain_name }}"

    # Apps I want to run on this server
    apps:
      - server_name: "{{ domain_name }}"
        http_port: 8080
        docroot: /vagrant/drupal/web
      - server_name: "docs.{{ domain_name}}"
        http_port: 8082
        docroot: /vagrant/docs
    # This server also acts as a load balancer
    varnish:
      port: 8081
      memory: 512M
      probe_resource_url: "_ping.php"
      control_key: "{{ 'vagrant' | to_uuid }}"
      acl_internal:
        - ip: 127.0.0.1
      acl_purge:
        - ip: 127.0.0.1
      acl_upstream_proxy:
        - ip: 127.0.0.1
      directors:
        - name: example
          host: "{{ domain_name }}"
          backends:
            - name: local_example_http
              address: 127.0.0.1
              port: 8080

    # BUT, we only use https for this host
    sslterminators:
      - server_name: "{{ domain_name }}"
        server_forwards: example.com
        ssl_certificate: certificate.crt
        ssl_certificate_key: ssl/certificate.key
        backends:
          - 127.0.0.1:8081

    httpforwards:
      - server_name: "{{ domain_name }}"
        forwarded_domains: '"{{ domain_name }}"'

    php_env_vars_include_db: True
